// Copyright 2020-2026 The streamIO Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package proto;
option go_package = "github.com/akzj/streamIO/proto;proto";

import "google/protobuf/empty.proto";
import "streamIO/pkg/sstore/pb/sstore.proto";

//stream operator

message WriteStreamEntry{
  int64 stream_id = 1;
  int64 offset = 2;
  bytes data = 3;
  int64 request_id = 4;
}
message WriteStreamResult{
  int64 stream_id = 1;
  int64 offset = 2;
  int64 request_id = 3;
  string err = 4;
}

message WriteStreamRequest{
  repeated WriteStreamEntry entries = 1;
}

message WriteStreamResponse{
  repeated WriteStreamResult results = 1;
}

message ReadStreamRequest {
  int64 stream_id = 1;
  int64 offset = 3;
  int64 size = 4;
  //add watcher to stream-server when stream no exist
  bool watch = 5;
}

message ReadStreamResponse{
  int64 offset = 3;
  bytes Data = 4;
}


message GetStreamStatRequest {
  int64 streamID = 1;
}

message GetStreamStatResponse{
  int64 streamID = 1;
  int64 begin = 2;
  int64 end = 3;
}

//SyncFromResponse make stream-server sync other stream-server,like master/slave
message SyncFromRequest {
  string addr = 1;
}

message GetStreamStoreVersionRequest{}

service stream_service{
  rpc WriteStream(stream WriteStreamRequest)returns(stream WriteStreamResponse){}
  rpc ReadStream(ReadStreamRequest)returns(stream ReadStreamResponse){}
  rpc GetStreamStat(GetStreamStatRequest)returns(GetStreamStatResponse){}
  rpc StartSyncFrom(SyncFromRequest)returns (google.protobuf.Empty){}
  rpc GetStreamStoreVersion(GetStreamStoreVersionRequest)returns (pb.Version){}
}